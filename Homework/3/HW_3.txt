%% #1
%For simplicity, x==x; mu==y; rho==z;
x = input('Please input an ''x'' value:');
y = input('Please input a ''mu'' value:');
z = input('Please input a ''sigma'' value:');
arr=[x y z]; %using arr as a variable to check that input are real numbers

if isnumeric(arr) && isreal(arr) && z>0
    f = (1/(sqrt(2*pi)*z)*exp(-.5*((x-y)/z)^2));
    disp(['The value of the Gaussian probability desnity funtion is: ' num2str(f)])
else
    disp('Please enter real numbers with a value of sigma greater than zero.')
end
%Please input an 'x' value:1
%Please input a 'mu' value:0
%Please input a 'sigma' value:2
%The value of the Gaussian probability desnity funtion is: 0.17603

%% #2

str = input('Are you cooking a large or a small egg? [L/S]: ','s');

if strcmp(str,'L')
    M = 67;
elseif strcmp(str,'S')
    M = 47;
else
    disp('Please restart and enter only the letter ''L'' or ''S'' with no spaces.')
end


p = 1.038;
c = 3.7;
K = .0054;
Tw = 100;
Ty = 70;
To = input('What is the initial temperature of the egg in degrees Celsius?: ');

if isnumeric(To) && isreal(To)
    t = ((M^(2/3)*c*p^(1/3))/(K*pi^2*(4*pi/3)^(2/3)))*log(.76*(To-Tw)/(Ty-Tw));
    m=t/60;
    disp(['To hard boil your egg, cook it for ' num2str(m) ' minutes at 100 degrees Celsius.'])
else
    disp('Please restart and enter a real number for the initial temperature of the egg.')
end

%Are you cooking a large or a small egg? [L/S]: L
%What is the initial temperature of the egg in degrees Celsius?: 4
%To hard boil your egg, cook it for 6.6096 minutes at 100 degrees Celsius.

%Are you cooking a large or a small egg? [L/S]: L
%What is the initial temperature of the egg in degrees Celsius?: 20
%To hard boil your egg, cook it for 5.2536 minutes at 100 degrees Celsius.

%% #3

function pstruct = getPolar(cstruct)
if isfield(cstruct,'x') && isfield(cstruct,'y')
    pstruct.r = sqrt(cstruct.x.^2+cstruct.y.^2);
    pstruct.phi = acos(cstruct.x./pstruct.r);
else
    disp('Please input a structure with fields x and y.')
end
end


function cstruct = getCart(pstruct)
if isfield(pstruct,'r') && isfield(pstruct,'phi')
    cstruct.x = pstruct.r.*cos(pstruct.phi);
    cstruct.y = pstruct.r.*sin(pstruct.phi);
else
    disp('Please input a structure with fields r and phi.')
end
end

%% #4
function dirbytes = sizedir(address)
a = dir;
dirbytes = sum([a.bytes]);
disp(dirbytes);
end

%% #5

function fib()
r = input('Please enter a non-negative integer or type stop: ','s');
if strcmp(r,'stop') || strcmp(r,'Stop') || strcmp(r,'STOP')
    return
elseif isreal(str2double(r)) && round(str2double(r)) == str2double(r) && str2double(r) >= 0
    a = getfib(str2double(r));
    disp(a)
    fib
end

function y = getfib(n_int)
if isnumeric(n_int) && floor(n_int) == n_int && ~isinf(n_int) && n_int>=0 
    if n_int == 0
        y=0;
    elseif n_int == 1
        y=1;
    else
        y = getfib(n_int-1) + getfib(n_int-2);    
    end  
else 
    disp('The input argument is not a non-negative integer!')
end
    

%% #6

function area = getTriangleArea(vertices)
    c1 = vertices{1};
    c2 = vertices{2};
    c3 = vertices{3};
if iscell(vertices) && isequal(size(vertices),[1 3]) && isequal(size(c1),size(c2),size(c3),[1 2])
    area = .5*abs((c2(1)*c3(2))-(c3(1)*c2(2))-(c1(1)*c3(2))+(c3(1)*c1(2))+(c1(1)*c2(2))-(c2(1)*c1(2)));
    D = ['The area of the triangle is: ',num2str(A)];
    disp(D)
else
    disp('Please use a 1x3 cell array with 2 values in each array.')
end


%% 7.

function primeness = isPrime(n)
if floor(n)==n & ~isinf(n)
    
%% 8.

function coeffs = genFunc(varargin)
if isreal([varargin{1} varargin{2} varargin{3}]) && nargin <= 3 && isnumeric([varargin{1} varargin{2} varargin{3}])
    if nargin == 1
        h3 = @(a,b,c)(a*x^2+b*x+c);
        a = varargin{1};
        b = 0;
        c = 0;
        h3(a,b,c)
    elseif nargin == 2
        h2 = @(a,b,c)(a*x^2+b*x+c);
        a = varargin{1};
        b = varargin{2};
        c = 0;
        h2(a,b,c)
    elseif nargin == 3
        h1 = @(a,b,c)(a*x^2+b*x+c);
        a = varargin{1};
        b = varargin{2};
        c = varargin{3};
        h1(a,b,c)
    end
    
else
    disp('Please only use no more than 3 real numbers as input.')
end
end
